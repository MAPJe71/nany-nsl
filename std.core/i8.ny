// Nany - https://nany.io
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
/// \file    i8.ny
/// \brief   Implementation of the class i8, Signed integer with width of exactly 8 bits
/// \ingroup std.core
/// \important THIS FILE IS AUTOMATICALLY GENERATED (see `nsl-core-generator.cpp`)




/// \brief   Signed integer with width of exactly 8 bits
/// \ingroup std.core
public class i8
{
	operator new;
	operator new (self pod: __i8);


	operator ++self: ref i8
	{
		pod = !!nany_inc_i8(pod);
		return self;
	}

	operator self++: ref i8
	{
		var tmp = self;
		pod = !!nany_inc_i8(pod);
		return tmp;
	}

	operator --self: ref i8
	{
		pod = !!nany_dec_i8(pod);
		return self;
	}

	operator self--: ref i8
	{
		var tmp = self;
		pod = !!nany_dec_i8(pod);
		return tmp;
	}


	operator += (cref x: i8): ref i8
	{
		pod = !!nany_add_i8_i8(pod, x.pod);
		return self;
	}

	operator += (cref x: __i8): ref i8
	{
		pod = !!nany_add_i8_i8(pod, x);
		return self;
	}


	operator -= (cref x: i8): ref i8
	{
		pod = !!nany_sub_i8_i8(pod, x.pod);
		return self;
	}

	operator -= (cref x: __i8): ref i8
	{
		pod = !!nany_sub_i8_i8(pod, x);
		return self;
	}


	operator *= (cref x: i8): ref i8
	{
		pod = !!nany_mult_i8_i8(pod, x.pod);
		return self;
	}

	operator *= (cref x: __i8): ref i8
	{
		pod = !!nany_mult_i8_i8(pod, x);
		return self;
	}


	operator /= (cref x: i8): ref i8
	{
		pod = !!nany_div_i8_i8(pod, x.pod);
		return self;
	}

	operator /= (cref x: __i8): ref i8
	{
		pod = !!nany_div_i8_i8(pod, x);
		return self;
	}


	//! The real integer representation
	var pod: __i8 = 0i8;
}









public operator == (a: __i8, b: __i8): ref bool
	-> !!nany_is_equal_i8__i8(a, b);

public operator == (cref a: i8, cref b: i8): ref bool
	-> a.pod == b.pod;

public operator == (cref a: i8, cref b: __i8): ref bool
	-> a.pod == b;

public operator == (cref a: __i8, cref b: i8): ref bool
	-> a == b.pod;





public operator != (a: __i8, b: __i8): ref bool
	-> !!nany_is_not_equal_i8__i8(a, b);

public operator != (cref a: i8, cref b: i8): ref bool
	-> a.pod != b.pod;

public operator != (cref a: i8, cref b: __i8): ref bool
	-> a.pod != b;

public operator != (cref a: __i8, cref b: i8): ref bool
	-> a != b.pod;





public operator < (a: __i8, b: __i8): ref bool
	-> !!nany_is_less_i8__i8(a, b);

public operator < (cref a: i8, cref b: i8): ref bool
	-> a.pod < b.pod;

public operator < (cref a: i8, cref b: __i8): ref bool
	-> a.pod < b;

public operator < (cref a: __i8, cref b: i8): ref bool
	-> a < b.pod;





public operator <= (a: __i8, b: __i8): ref bool
	-> !!nany_is_less_or_equal_i8__i8(a, b);

public operator <= (cref a: i8, cref b: i8): ref bool
	-> a.pod <= b.pod;

public operator <= (cref a: i8, cref b: __i8): ref bool
	-> a.pod <= b;

public operator <= (cref a: __i8, cref b: i8): ref bool
	-> a <= b.pod;





public operator > (a: __i8, b: __i8): ref bool
	-> !!nany_is_greater_i8__i8(a, b);

public operator > (cref a: i8, cref b: i8): ref bool
	-> a.pod > b.pod;

public operator > (cref a: i8, cref b: __i8): ref bool
	-> a.pod > b;

public operator > (cref a: __i8, cref b: i8): ref bool
	-> a > b.pod;





public operator >= (a: __i8, b: __i8): ref bool
	-> !!nany_is_greater_or_equal_i8__i8(a, b);

public operator >= (cref a: i8, cref b: i8): ref bool
	-> a.pod >= b.pod;

public operator >= (cref a: i8, cref b: __i8): ref bool
	-> a.pod >= b;

public operator >= (cref a: __i8, cref b: i8): ref bool
	-> a >= b.pod;





public operator + (cref a: i8, cref b): ref i8
	-> (new a) += b;

public operator + (cref a: __i8, cref b: i8): ref i8
	-> (new i8(a)) += b;




public operator - (cref a: i8, cref b): ref i8
	-> (new a) -= b;

public operator - (cref a: __i8, cref b: i8): ref i8
	-> (new i8(a)) -= b;




public operator * (cref a: i8, cref b): ref i8
	-> (new a) *= b;

public operator * (cref a: __i8, cref b: i8): ref i8
	-> (new i8(a)) *= b;




public operator / (cref a: i8, cref b): ref i8
	-> (new a) /= b;

public operator / (cref a: __i8, cref b: i8): ref i8
	-> (new i8(a)) /= b;