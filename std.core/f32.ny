// Nany - https://nany.io
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
/// \file    f32.ny
/// \brief   Implementation of the class f32, single-precision floating-point number (32bits)
/// \ingroup std.core
/// \important THIS FILE IS AUTOMATICALLY GENERATED (see `nsl-core-generator.cpp`)




/// \brief   single-precision floating-point number (32bits)
/// \ingroup std.core
public class f32
{
	operator new;
	operator new(self cref pod: f32);
	[[suggest: false]] operator new(self pod: __f32);


	operator ++self: ref f32
	{
		pod = !!finc(pod);
		return self;
	}

	operator self++: ref f32
	{
		ref tmp = new f32(pod);
		pod = !!finc(pod);
		return tmp;
	}

	operator --self: ref f32
	{
		pod = !!fdec(pod);
		return self;
	}

	operator self--: ref f32
	{
		ref tmp = new f32(pod);
		pod = !!fdec(pod);
		return tmp;
	}


	operator += (cref x: f32): ref f32
	{
		pod = !!fadd(pod, x.pod);
		return self;
	}

	[[suggest: false]] operator += (x: __f32): ref f32
	{
		pod = !!fadd(pod, x);
		return self;
	}


	operator -= (cref x: f32): ref f32
	{
		pod = !!fsub(pod, x.pod);
		return self;
	}

	[[suggest: false]] operator -= (x: __f32): ref f32
	{
		pod = !!fsub(pod, x);
		return self;
	}


	operator *= (cref x: f32): ref f32
	{
		pod = !!fmul(pod, x.pod);
		return self;
	}

	[[suggest: false]] operator *= (x: __f32): ref f32
	{
		pod = !!fmul(pod, x);
		return self;
	}


	operator /= (cref x: f32): ref f32
	{
		pod = !!fdiv(pod, x.pod);
		return self;
	}

	[[suggest: false]] operator /= (x: __f32): ref f32
	{
		pod = !!fdiv(pod, x);
		return self;
	}


private:
	var pod = 0__f32;

} // class f32









[[builtinalias: fgt]] public operator > (a: cref f32, b: cref f32): __bool;
[[builtinalias: fgt, suggest: false]] public operator > (a: cref f32, b: __f32): ref bool;
[[builtinalias: fgt, suggest: false]] public operator > (a: __f32, b: cref f32): ref bool;
[[builtinalias: fgt, suggest: false]] public operator > (a: __f32, b: __f32): ref bool;

[[builtinalias: fgte]] public operator >= (a: cref f32, b: cref f32): __bool;
[[builtinalias: fgte, suggest: false]] public operator >= (a: cref f32, b: __f32): ref bool;
[[builtinalias: fgte, suggest: false]] public operator >= (a: __f32, b: cref f32): ref bool;
[[builtinalias: fgte, suggest: false]] public operator >= (a: __f32, b: __f32): ref bool;

[[builtinalias: flt]] public operator < (a: cref f32, b: cref f32): __bool;
[[builtinalias: flt, suggest: false]] public operator < (a: cref f32, b: __f32): ref bool;
[[builtinalias: flt, suggest: false]] public operator < (a: __f32, b: cref f32): ref bool;
[[builtinalias: flt, suggest: false]] public operator < (a: __f32, b: __f32): ref bool;

[[builtinalias: flte]] public operator <= (a: cref f32, b: cref f32): __bool;
[[builtinalias: flte, suggest: false]] public operator <= (a: cref f32, b: __f32): ref bool;
[[builtinalias: flte, suggest: false]] public operator <= (a: __f32, b: cref f32): ref bool;
[[builtinalias: flte, suggest: false]] public operator <= (a: __f32, b: __f32): ref bool;

[[builtinalias: eq]] public operator == (a: cref f32, b: cref f32): __bool;
[[builtinalias: eq, suggest: false]] public operator == (a: cref f32, b: __f32): ref bool;
[[builtinalias: eq, suggest: false]] public operator == (a: __f32, b: cref f32): ref bool;
[[builtinalias: eq, suggest: false]] public operator == (a: __f32, b: __f32): ref bool;

[[builtinalias: neq]] public operator != (a: cref f32, b: cref f32): __bool;
[[builtinalias: neq, suggest: false]] public operator != (a: cref f32, b: __f32): ref bool;
[[builtinalias: neq, suggest: false]] public operator != (a: __f32, b: cref f32): ref bool;
[[builtinalias: neq, suggest: false]] public operator != (a: __f32, b: __f32): ref bool;




[[builtinalias: fadd]] public operator + (a: cref f32, b: cref f32): ref f32;
[[builtinalias: fadd, suggest: false]] public operator + (a: cref f32, b: __f32): ref f32;
[[builtinalias: fadd, suggest: false]] public operator + (a: __f32, b: cref f32): ref f32;
[[builtinalias: fadd, suggest: false]] public operator + (a: __f32, b: __f32): __f32;


[[builtinalias: fsub]] public operator - (a: cref f32, b: cref f32): ref f32;
[[builtinalias: fsub, suggest: false]] public operator - (a: cref f32, b: __f32): ref f32;
[[builtinalias: fsub, suggest: false]] public operator - (a: __f32, b: cref f32): ref f32;
[[builtinalias: fsub, suggest: false]] public operator - (a: __f32, b: __f32): __f32;


[[builtinalias: fdiv]] public operator / (a: cref f32, b: cref f32): ref f32;
[[builtinalias: fdiv, suggest: false]] public operator / (a: cref f32, b: __f32): ref f32;
[[builtinalias: fdiv, suggest: false]] public operator / (a: __f32, b: cref f32): ref f32;
[[builtinalias: fdiv, suggest: false]] public operator / (a: __f32, b: __f32): __f32;


[[builtinalias: fmul]] public operator * (a: cref f32, b: cref f32): ref f32;
[[builtinalias: fmul, suggest: false]] public operator * (a: cref f32, b: __f32): ref f32;
[[builtinalias: fmul, suggest: false]] public operator * (a: __f32, b: cref f32): ref f32;
[[builtinalias: fmul, suggest: false]] public operator * (a: __f32, b: __f32): __f32;






// -*- mode: nany;-*-
// vim: set filetype=nany: