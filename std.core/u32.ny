// Nany - https://nany.io
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
/// \file    u32.ny
/// \brief   Implementation of the class u32, Unsigned integer with width of exactly 32 bits
/// \ingroup std.core
/// \important THIS FILE IS AUTOMATICALLY GENERATED (see `nsl-core-generator.cpp`)




/// \brief   Unsigned integer with width of exactly 32 bits
/// \ingroup std.core
public class u32
{
	operator new;
	operator new (self pod: __u32);
	operator new (self pod: __u16);
	operator new (self pod: __u8);


	operator ++self: ref u32
	{
		pod = !!nany_inc_u32(pod);
		return self;
	}

	operator self++: ref u32
	{
		var tmp = self;
		pod = !!nany_inc_u32(pod);
		return tmp;
	}

	operator --self: ref u32
	{
		pod = !!nany_dec_u32(pod);
		return self;
	}

	operator self--: ref u32
	{
		var tmp = self;
		pod = !!nany_dec_u32(pod);
		return tmp;
	}


	operator += (cref x: u32): ref u32
	{
		pod = !!nany_add_u32_u32(pod, x.pod);
		return self;
	}

	operator += (cref x: __u32): ref u32
	{
		pod = !!nany_add_u32_u32(pod, x);
		return self;
	}

	operator += (cref x: u16): ref u32
	{
		pod = !!nany_add_u32_u16(pod, x.pod);
		return self;
	}

	operator += (cref x: __u16): ref u32
	{
		pod = !!nany_add_u32_u16(pod, x);
		return self;
	}

	operator += (cref x: u8): ref u32
	{
		pod = !!nany_add_u32_u8(pod, x.pod);
		return self;
	}

	operator += (cref x: __u8): ref u32
	{
		pod = !!nany_add_u32_u8(pod, x);
		return self;
	}


	operator -= (cref x: u32): ref u32
	{
		pod = !!nany_sub_u32_u32(pod, x.pod);
		return self;
	}

	operator -= (cref x: __u32): ref u32
	{
		pod = !!nany_sub_u32_u32(pod, x);
		return self;
	}

	operator -= (cref x: u16): ref u32
	{
		pod = !!nany_sub_u32_u16(pod, x.pod);
		return self;
	}

	operator -= (cref x: __u16): ref u32
	{
		pod = !!nany_sub_u32_u16(pod, x);
		return self;
	}

	operator -= (cref x: u8): ref u32
	{
		pod = !!nany_sub_u32_u8(pod, x.pod);
		return self;
	}

	operator -= (cref x: __u8): ref u32
	{
		pod = !!nany_sub_u32_u8(pod, x);
		return self;
	}


	operator *= (cref x: u32): ref u32
	{
		pod = !!nany_mult_u32_u32(pod, x.pod);
		return self;
	}

	operator *= (cref x: __u32): ref u32
	{
		pod = !!nany_mult_u32_u32(pod, x);
		return self;
	}

	operator *= (cref x: u16): ref u32
	{
		pod = !!nany_mult_u32_u16(pod, x.pod);
		return self;
	}

	operator *= (cref x: __u16): ref u32
	{
		pod = !!nany_mult_u32_u16(pod, x);
		return self;
	}

	operator *= (cref x: u8): ref u32
	{
		pod = !!nany_mult_u32_u8(pod, x.pod);
		return self;
	}

	operator *= (cref x: __u8): ref u32
	{
		pod = !!nany_mult_u32_u8(pod, x);
		return self;
	}


	operator /= (cref x: u32): ref u32
	{
		pod = !!nany_div_u32_u32(pod, x.pod);
		return self;
	}

	operator /= (cref x: __u32): ref u32
	{
		pod = !!nany_div_u32_u32(pod, x);
		return self;
	}

	operator /= (cref x: u16): ref u32
	{
		pod = !!nany_div_u32_u16(pod, x.pod);
		return self;
	}

	operator /= (cref x: __u16): ref u32
	{
		pod = !!nany_div_u32_u16(pod, x);
		return self;
	}

	operator /= (cref x: u8): ref u32
	{
		pod = !!nany_div_u32_u8(pod, x.pod);
		return self;
	}

	operator /= (cref x: __u8): ref u32
	{
		pod = !!nany_div_u32_u8(pod, x);
		return self;
	}


	//! The real integer representation
	var pod: __u32 = 0u32;
}









public operator == (a: __u32, b: __u32): bool
	-> !!nany_is_equal_u32__u32(a, b);

public operator == (cref a: u32, cref b: u32): bool
	-> a.pod == b.pod;

public operator == (cref a: u32, cref b: __u32): bool
	-> a.pod == b;

public operator == (cref a: __u32, cref b: u32): bool
	-> a == b.pod;


public operator == (a: __u32, b: __u16): bool
	-> !!nany_is_equal_u32__u16(a, b);

public operator == (cref a: u32, cref b: u16): bool
	-> a.pod == b.pod;

public operator == (cref a: u32, cref b: __u16): bool
	-> a.pod == b;

public operator == (cref a: __u32, cref b: u16): bool
	-> a == b.pod;


public operator == (a: __u32, b: __u8): bool
	-> !!nany_is_equal_u32__u8(a, b);

public operator == (cref a: u32, cref b: u8): bool
	-> a.pod == b.pod;

public operator == (cref a: u32, cref b: __u8): bool
	-> a.pod == b;

public operator == (cref a: __u32, cref b: u8): bool
	-> a == b.pod;




public operator != (a: __u32, b: __u32): bool
	-> !!nany_is_not_equal_u32__u32(a, b);

public operator != (cref a: u32, cref b: u32): bool
	-> a.pod != b.pod;

public operator != (cref a: u32, cref b: __u32): bool
	-> a.pod != b;

public operator != (cref a: __u32, cref b: u32): bool
	-> a != b.pod;


public operator != (a: __u32, b: __u16): bool
	-> !!nany_is_not_equal_u32__u16(a, b);

public operator != (cref a: u32, cref b: u16): bool
	-> a.pod != b.pod;

public operator != (cref a: u32, cref b: __u16): bool
	-> a.pod != b;

public operator != (cref a: __u32, cref b: u16): bool
	-> a != b.pod;


public operator != (a: __u32, b: __u8): bool
	-> !!nany_is_not_equal_u32__u8(a, b);

public operator != (cref a: u32, cref b: u8): bool
	-> a.pod != b.pod;

public operator != (cref a: u32, cref b: __u8): bool
	-> a.pod != b;

public operator != (cref a: __u32, cref b: u8): bool
	-> a != b.pod;




public operator < (a: __u32, b: __u32): bool
	-> !!nany_is_less_u32__u32(a, b);

public operator < (cref a: u32, cref b: u32): bool
	-> a.pod < b.pod;

public operator < (cref a: u32, cref b: __u32): bool
	-> a.pod < b;

public operator < (cref a: __u32, cref b: u32): bool
	-> a < b.pod;


public operator < (a: __u32, b: __u16): bool
	-> !!nany_is_less_u32__u16(a, b);

public operator < (cref a: u32, cref b: u16): bool
	-> a.pod < b.pod;

public operator < (cref a: u32, cref b: __u16): bool
	-> a.pod < b;

public operator < (cref a: __u32, cref b: u16): bool
	-> a < b.pod;


public operator < (a: __u32, b: __u8): bool
	-> !!nany_is_less_u32__u8(a, b);

public operator < (cref a: u32, cref b: u8): bool
	-> a.pod < b.pod;

public operator < (cref a: u32, cref b: __u8): bool
	-> a.pod < b;

public operator < (cref a: __u32, cref b: u8): bool
	-> a < b.pod;




public operator <= (a: __u32, b: __u32): bool
	-> !!nany_is_less_or_equal_u32__u32(a, b);

public operator <= (cref a: u32, cref b: u32): bool
	-> a.pod <= b.pod;

public operator <= (cref a: u32, cref b: __u32): bool
	-> a.pod <= b;

public operator <= (cref a: __u32, cref b: u32): bool
	-> a <= b.pod;


public operator <= (a: __u32, b: __u16): bool
	-> !!nany_is_less_or_equal_u32__u16(a, b);

public operator <= (cref a: u32, cref b: u16): bool
	-> a.pod <= b.pod;

public operator <= (cref a: u32, cref b: __u16): bool
	-> a.pod <= b;

public operator <= (cref a: __u32, cref b: u16): bool
	-> a <= b.pod;


public operator <= (a: __u32, b: __u8): bool
	-> !!nany_is_less_or_equal_u32__u8(a, b);

public operator <= (cref a: u32, cref b: u8): bool
	-> a.pod <= b.pod;

public operator <= (cref a: u32, cref b: __u8): bool
	-> a.pod <= b;

public operator <= (cref a: __u32, cref b: u8): bool
	-> a <= b.pod;




public operator > (a: __u32, b: __u32): bool
	-> !!nany_is_greater_u32__u32(a, b);

public operator > (cref a: u32, cref b: u32): bool
	-> a.pod > b.pod;

public operator > (cref a: u32, cref b: __u32): bool
	-> a.pod > b;

public operator > (cref a: __u32, cref b: u32): bool
	-> a > b.pod;


public operator > (a: __u32, b: __u16): bool
	-> !!nany_is_greater_u32__u16(a, b);

public operator > (cref a: u32, cref b: u16): bool
	-> a.pod > b.pod;

public operator > (cref a: u32, cref b: __u16): bool
	-> a.pod > b;

public operator > (cref a: __u32, cref b: u16): bool
	-> a > b.pod;


public operator > (a: __u32, b: __u8): bool
	-> !!nany_is_greater_u32__u8(a, b);

public operator > (cref a: u32, cref b: u8): bool
	-> a.pod > b.pod;

public operator > (cref a: u32, cref b: __u8): bool
	-> a.pod > b;

public operator > (cref a: __u32, cref b: u8): bool
	-> a > b.pod;




public operator >= (a: __u32, b: __u32): bool
	-> !!nany_is_greater_or_equal_u32__u32(a, b);

public operator >= (cref a: u32, cref b: u32): bool
	-> a.pod >= b.pod;

public operator >= (cref a: u32, cref b: __u32): bool
	-> a.pod >= b;

public operator >= (cref a: __u32, cref b: u32): bool
	-> a >= b.pod;


public operator >= (a: __u32, b: __u16): bool
	-> !!nany_is_greater_or_equal_u32__u16(a, b);

public operator >= (cref a: u32, cref b: u16): bool
	-> a.pod >= b.pod;

public operator >= (cref a: u32, cref b: __u16): bool
	-> a.pod >= b;

public operator >= (cref a: __u32, cref b: u16): bool
	-> a >= b.pod;


public operator >= (a: __u32, b: __u8): bool
	-> !!nany_is_greater_or_equal_u32__u8(a, b);

public operator >= (cref a: u32, cref b: u8): bool
	-> a.pod >= b.pod;

public operator >= (cref a: u32, cref b: __u8): bool
	-> a.pod >= b;

public operator >= (cref a: __u32, cref b: u8): bool
	-> a >= b.pod;




public operator + (cref a: u32, cref b): u32
	-> (new a) += b;

public operator + (cref a: __u32, cref b: u32): u32
	-> (new u32(a)) += b;

public operator + (cref a: __u16, cref b: u32): u32
	-> (new u32(a)) += b;

public operator + (cref a: __u8, cref b: u32): u32
	-> (new u32(a)) += b;



public operator - (cref a: u32, cref b): u32
	-> (new a) -= b;

public operator - (cref a: __u32, cref b: u32): u32
	-> (new u32(a)) -= b;

public operator - (cref a: __u16, cref b: u32): u32
	-> (new u32(a)) -= b;

public operator - (cref a: __u8, cref b: u32): u32
	-> (new u32(a)) -= b;



public operator * (cref a: u32, cref b): u32
	-> (new a) *= b;

public operator * (cref a: __u32, cref b: u32): u32
	-> (new u32(a)) *= b;

public operator * (cref a: __u16, cref b: u32): u32
	-> (new u32(a)) *= b;

public operator * (cref a: __u8, cref b: u32): u32
	-> (new u32(a)) *= b;



public operator / (cref a: u32, cref b): u32
	-> (new a) /= b;

public operator / (cref a: __u32, cref b: u32): u32
	-> (new u32(a)) /= b;

public operator / (cref a: __u16, cref b: u32): u32
	-> (new u32(a)) /= b;

public operator / (cref a: __u8, cref b: u32): u32
	-> (new u32(a)) /= b;