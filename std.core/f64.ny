// Nany - https://nany.io
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
/// \file    f64.ny
/// \brief   Implementation of the class f64, double-precision floating-point number (64bits)
/// \ingroup std.core
/// \important THIS FILE IS AUTOMATICALLY GENERATED (see `nsl-core-generator.cpp`)




/// \brief   double-precision floating-point number (64bits)
/// \ingroup std.core
public class f64
{
	operator new;
	operator new(self cref pod: f32);
	operator new(self cref pod: f64);
	#[suggest: false] operator new(self pod: __f32);
	#[suggest: false] operator new(self pod: __f64);


	operator ++self: ref f64
	{
		pod = !!finc(pod);
		return self;
	}

	operator self++: ref f64
	{
		ref tmp = new f64(pod);
		pod = !!finc(pod);
		return tmp;
	}

	operator --self: ref f64
	{
		pod = !!fdec(pod);
		return self;
	}

	operator self--: ref f64
	{
		ref tmp = new f64(pod);
		pod = !!fdec(pod);
		return tmp;
	}


	operator += (cref x: f64): ref f64
	{
		pod = !!fadd(pod, x.pod);
		return self;
	}

	#[suggest: false] operator += (x: __f64): ref f64
	{
		pod = !!fadd(pod, x);
		return self;
	}


	operator -= (cref x: f64): ref f64
	{
		pod = !!fsub(pod, x.pod);
		return self;
	}

	#[suggest: false] operator -= (x: __f64): ref f64
	{
		pod = !!fsub(pod, x);
		return self;
	}


	operator *= (cref x: f64): ref f64
	{
		pod = !!fmul(pod, x.pod);
		return self;
	}

	#[suggest: false] operator *= (x: __f64): ref f64
	{
		pod = !!fmul(pod, x);
		return self;
	}


	operator /= (cref x: f64): ref f64
	{
		pod = !!fdiv(pod, x.pod);
		return self;
	}

	#[suggest: false] operator /= (x: __f64): ref f64
	{
		pod = !!fdiv(pod, x);
		return self;
	}


private:
	var pod = 0__f64;

} // class f64









#[builtinalias: fgt] public operator > (a: cref f64, b: cref f64): ref bool;
#[builtinalias: fgt, suggest: false] public operator > (a: cref f64, b: __f64): ref bool;
#[builtinalias: fgt, suggest: false] public operator > (a: __f64, b: cref f64): ref bool;
#[builtinalias: fgt, suggest: false] public operator > (a: __f64, b: __f64): __bool;

#[builtinalias: fgte] public operator >= (a: cref f64, b: cref f64): ref bool;
#[builtinalias: fgte, suggest: false] public operator >= (a: cref f64, b: __f64): ref bool;
#[builtinalias: fgte, suggest: false] public operator >= (a: __f64, b: cref f64): ref bool;
#[builtinalias: fgte, suggest: false] public operator >= (a: __f64, b: __f64): __bool;

#[builtinalias: flt] public operator < (a: cref f64, b: cref f64): ref bool;
#[builtinalias: flt, suggest: false] public operator < (a: cref f64, b: __f64): ref bool;
#[builtinalias: flt, suggest: false] public operator < (a: __f64, b: cref f64): ref bool;
#[builtinalias: flt, suggest: false] public operator < (a: __f64, b: __f64): __bool;

#[builtinalias: flte] public operator <= (a: cref f64, b: cref f64): ref bool;
#[builtinalias: flte, suggest: false] public operator <= (a: cref f64, b: __f64): ref bool;
#[builtinalias: flte, suggest: false] public operator <= (a: __f64, b: cref f64): ref bool;
#[builtinalias: flte, suggest: false] public operator <= (a: __f64, b: __f64): __bool;

#[builtinalias: eq] public operator == (a: cref f64, b: cref f64): ref bool;
#[builtinalias: eq, suggest: false] public operator == (a: cref f64, b: __f64): ref bool;
#[builtinalias: eq, suggest: false] public operator == (a: __f64, b: cref f64): ref bool;
#[builtinalias: eq, suggest: false] public operator == (a: __f64, b: __f64): __bool;

#[builtinalias: neq] public operator != (a: cref f64, b: cref f64): ref bool;
#[builtinalias: neq, suggest: false] public operator != (a: cref f64, b: __f64): ref bool;
#[builtinalias: neq, suggest: false] public operator != (a: __f64, b: cref f64): ref bool;
#[builtinalias: neq, suggest: false] public operator != (a: __f64, b: __f64): __bool;




#[builtinalias: fadd] public operator + (a: cref f64, b: cref f64): ref f64;
#[builtinalias: fadd, suggest: false] public operator + (a: cref f64, b: __f64): ref f64;
#[builtinalias: fadd, suggest: false] public operator + (a: __f64, b: cref f64): ref f64;
#[builtinalias: fadd, suggest: false] public operator + (a: __f64, b: __f64): __f64;


#[builtinalias: fsub] public operator - (a: cref f64, b: cref f64): ref f64;
#[builtinalias: fsub, suggest: false] public operator - (a: cref f64, b: __f64): ref f64;
#[builtinalias: fsub, suggest: false] public operator - (a: __f64, b: cref f64): ref f64;
#[builtinalias: fsub, suggest: false] public operator - (a: __f64, b: __f64): __f64;


#[builtinalias: fdiv] public operator / (a: cref f64, b: cref f64): ref f64;
#[builtinalias: fdiv, suggest: false] public operator / (a: cref f64, b: __f64): ref f64;
#[builtinalias: fdiv, suggest: false] public operator / (a: __f64, b: cref f64): ref f64;
#[builtinalias: fdiv, suggest: false] public operator / (a: __f64, b: __f64): __f64;


#[builtinalias: fmul] public operator * (a: cref f64, b: cref f64): ref f64;
#[builtinalias: fmul, suggest: false] public operator * (a: cref f64, b: __f64): ref f64;
#[builtinalias: fmul, suggest: false] public operator * (a: __f64, b: cref f64): ref f64;
#[builtinalias: fmul, suggest: false] public operator * (a: __f64, b: __f64): __f64;






// -*- mode: nany;-*-
// vim: set filetype=nany: